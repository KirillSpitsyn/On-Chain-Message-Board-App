'use client';

import { useState, useEffect } from 'react';
import { ethers } from 'ethers';

// Import contract info automatically generated by deployment script
import { CONTRACT_ADDRESS, CONTRACT_ABI, CHAIN_ID } from '../contracts/contractInfo';

//Message object interface
interface Message {
  author: string;
  content: string;
  timestamp: Date;
  id: number;
}

export default function HomePage() {
  const [account, setAccount] = useState<string>('');
  const [contract, setContract] = useState<ethers.Contract | null>(null);
  const [messages, setMessages] = useState<Message[]>([]);
  const [newMessage, setNewMessage] = useState<string>('');
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string>('');
  const [success, setSuccess] = useState<string>('');
  const [networkError, setNetworkError] = useState<string>('');
  
  // Sort and Filter states functions
  const [sortBy, setSortBy] = useState<'timestamp' | 'author'>('timestamp');
  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('desc');
  const [filterAuthor, setFilterAuthor] = useState<string>('');
  const [isFiltered, setIsFiltered] = useState<boolean>(false);
  const [expandedMessages, setExpandedMessages] = useState<Set<number>>(new Set());

  const MAX_CHARACTERS = 280;

  useEffect(() => {
    loadMessages();
    console.log('Contract Address:', CONTRACT_ADDRESS);
    console.log('Chain ID:', CHAIN_ID);
    console.log('ABI loaded:', CONTRACT_ABI ? 'Yes' : 'No');
  }, []);

  // Clear success message after 5 seconds
  useEffect(() => {
    if (success) {
      const timer = setTimeout(() => setSuccess(''), 5000);
      return () => clearTimeout(timer);
    }
  }, [success]);

  // Clear error message after 8 seconds
  useEffect(() => {
    if (error) {
      const timer = setTimeout(() => setError(''), 8000);
      return () => clearTimeout(timer);
    }
  }, [error]);

  // Function to sort messages by timestamp and author
  const sortMessages = (messages: Message[]) => {
    return [...messages].sort((a, b) => {
      let compare = 0;
      
      if (sortBy === 'timestamp') {
        compare = a.timestamp.getTime() - b.timestamp.getTime();
      } else if (sortBy === 'author') {
        compare = a.author.localeCompare(b.author);
      }
      
      return sortOrder === 'desc' ? -compare : compare;
    });
  };

  // Checking if the user is on correct network
  const checkNetwork = async () => {
    if (typeof window.ethereum !== 'undefined') {
      try {
        const chainId = await window.ethereum.request({ method: 'eth_chainId' });
        const currentChainId = parseInt(chainId, 16);
        
        if (currentChainId !== CHAIN_ID) {
          setNetworkError(`Please switch to Sepolia network. Current: ${currentChainId}, Expected: ${CHAIN_ID}`);
          return false;
        } else {
          setNetworkError('');
          return true;
        }
      } catch (error) {
        console.error('Error checking network:', error);
        return false;
      }
    }
    return false;
  };

  // Switch to Sepolia network
  const switchToSepolia = async () => {
    if (typeof window.ethereum === 'undefined') {
      setError('MetaMask not detected. Please install MetaMask.');
      return;
    }

    try {
      await window.ethereum.request({
        method: 'wallet_switchEthereumChain',
        params: [{ chainId: '0xaa36a7' }], // 11155111 in hex
      });
    } catch (error: any) {
      if (error.code === 4902) {
        try {
          if (window.ethereum) {
            await window.ethereum.request({
              method: 'wallet_addEthereumChain',
              params: [{
                chainId: '0xaa36a7',
                chainName: 'Sepolia Test Network',
                rpcUrls: ['https://sepolia.infura.io/v3/'],
                nativeCurrency: {
                  name: 'SepoliaETH',
                  symbol: 'SEP',
                  decimals: 18
                },
                blockExplorerUrls: ['https://sepolia.etherscan.io/']
              }]
            });
          }
        } catch (addError) {
          console.error('Error adding network:', addError);
        }
      }
    }
  };

  // Connect to MetaMask wallet
  const connectWallet = async (): Promise<void> => {
    if (typeof window.ethereum !== 'undefined') {
      try {
        setError('');
        
        const isCorrectNetwork = await checkNetwork();
        if (!isCorrectNetwork) {
          await switchToSepolia();
        }

        const accounts = await window.ethereum.request({
          method: 'eth_requestAccounts'
        });
        
        setAccount(accounts[0]);
        await initializeContract();
        console.log('Connected to:', accounts[0]);
      } catch (err) {
        const errorMessage = err instanceof Error ? err.message : 'Unknown error occurred';
        setError('Failed to connect wallet: ' + errorMessage);
      }
    } else {
      setError('MetaMask not detected. Please install MetaMask.');
    }
  };

  // Initialize contract
  const initializeContract = async () => {
    if (typeof window.ethereum !== 'undefined') {
      try {
        const provider = new ethers.BrowserProvider(window.ethereum);
        const signer = await provider.getSigner();
        const contractInstance = new ethers.Contract(CONTRACT_ADDRESS, CONTRACT_ABI, signer);
        setContract(contractInstance);
      } catch (error) {
        console.error('Error initializing contract:', error);
      }
    }
  };

  // Load all messages from the blockchain
  const loadMessages = async () => {
    try {
      setLoading(true);
      setIsFiltered(false);
      
      const provider = new ethers.JsonRpcProvider(`https://sepolia.infura.io/v3/ee9748798c334610ba85f4cc38a44890`);
      const contractInstance = new ethers.Contract(CONTRACT_ADDRESS, CONTRACT_ABI, provider);
      
      const allMessages = await contractInstance.getAllMessages();
      
      const formattedMessages: Message[] = allMessages.map((msg: any, index: number) => ({
        id: index,
        author: msg.author,
        content: msg.content,
        timestamp: new Date(Number(msg.timestamp) * 1000),
      }));
      
      const sortedMessages = sortMessages(formattedMessages);
      setMessages(sortedMessages);
    } catch (err) {
      console.error('Error loading messages:', err);
    } finally {
      setLoading(false);
    }
  };

  // Load messages by specific author using smart contract "getMessagesByAuthor" function
  const loadMessagesByAuthor = async (authorAddress: string) => {
    if (!authorAddress.trim()) {
      loadMessages();
      return;
    }

    // Validate Ethereum address format
    if (!ethers.isAddress(authorAddress)) {
      setError('Invalid Ethereum address format');
      return;
    }

    try {
      setLoading(true);
      setError('');
      setIsFiltered(true);
      
      const provider = new ethers.JsonRpcProvider(`https://sepolia.infura.io/v3/ee9748798c334610ba85f4cc38a44890`);
      const contractInstance = new ethers.Contract(CONTRACT_ADDRESS, CONTRACT_ABI, provider);
      
      const authorMessages = await contractInstance.getMessagesByAuthor(authorAddress);
      
      const formattedMessages: Message[] = authorMessages.map((msg: any, index: number) => ({
        id: index,
        author: msg.author,
        content: msg.content,
        timestamp: new Date(Number(msg.timestamp) * 1000),
      }));
      
      const sortedMessages = sortMessages(formattedMessages);
      setMessages(sortedMessages);
    } catch (err) {
      console.error('Error loading messages by author:', err);
      setError('Failed to load messages for this author. Make sure the address is correct.');
    } finally {
      setLoading(false);
    }
  };

  // Post message to the blockchain
  const postMessage = async () => {
    if (!contract) {
      setError('Please connect your wallet first.');
      return;
    }
    
    if (!newMessage.trim()) {
      setError('Message cannot be empty.');
      return;
    }
    
    if (newMessage.length > MAX_CHARACTERS) {
      setError(`Message must be ${MAX_CHARACTERS} characters or less.`);
      return;
    }

    const isCorrectNetwork = await checkNetwork();
    if (!isCorrectNetwork) {
      setError('Please switch to Sepolia network to post messages.');
      return;
    }
    
    try {
      setLoading(true);
      setError('');
      setSuccess('');
      
      const tx = await contract.postMessage(newMessage.trim());
      console.log('Transaction sent:', tx.hash);
      
      await tx.wait();
      console.log('Transaction confirmed!');
      
      setNewMessage('');
      setSuccess('Message posted successfully to the blockchain!');
      
      // Reload messages based on current view
      if (isFiltered && filterAuthor) {
        await loadMessagesByAuthor(filterAuthor);
      } else {
        await loadMessages();
      }
      
    } catch (err: any) {
      console.error('Error posting message:', err);
      if (err.reason) {
        setError('Transaction failed: ' + err.reason);
      } else if (err.message.includes('user rejected')) {
        setError('Transaction was rejected.');
      } else {
        setError('Failed to post message. Make sure you have Sepolia ETH for gas fees.');
      }
    } finally {
      setLoading(false);
    }
  };

  // Handle sorting of messages by timestamp and author, and re-sort current messages
  const handleSortChange = (newSortBy: 'timestamp' | 'author', newSortOrder: 'asc' | 'desc') => {
    setSortBy(newSortBy);
    setSortOrder(newSortOrder);
    
    // Re-sort current messages
    const sortedMessages = [...messages].sort((a, b) => {
      let compare = 0;
      
      if (newSortBy === 'timestamp') {
        compare = a.timestamp.getTime() - b.timestamp.getTime();
      } else if (newSortBy === 'author') {
        compare = a.author.localeCompare(b.author);
      }
      
      return newSortOrder === 'desc' ? -compare : compare;
    });
    
    setMessages(sortedMessages);
  };

  // Handle filter by author
  const handleFilter = () => {
    if (filterAuthor.trim()) {
      loadMessagesByAuthor(filterAuthor.trim());
    } else {
      loadMessages();
    }
  };

  // Clear the filter and show all messages
  const clearFilter = () => {
    setFilterAuthor('');
    setIsFiltered(false);
    loadMessages();
  };

  // Filter messages by your posted messages
  const showMyMessages = () => {
    if (account) {
      setFilterAuthor(account);
      loadMessagesByAuthor(account);
    }
  };

  // Utility function to show shortened wallet addresses
  const shortenAddress = (address: string): string => {
    return `${address.slice(0, 6)}...${address.slice(-4)}`;
  };

  // Handler function for message textarea input
  const handleMessageChange = (e: React.ChangeEvent<HTMLTextAreaElement>): void => {
    const value = e.target.value;
    if (value.length <= MAX_CHARACTERS) {
      setNewMessage(value);
    }
  };

  // Toggle message expansion
  const toggleMessageExpansion = (messageId: number) => {
    const newExpandedMessages = new Set(expandedMessages);
    if (newExpandedMessages.has(messageId)) {
      newExpandedMessages.delete(messageId);
    } else {
      newExpandedMessages.add(messageId);
    }
    setExpandedMessages(newExpandedMessages);
  };

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-3xl mx-auto px-4">
        {/* Header of the page */}
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold text-gray-900 mb-4">
            On-Chain Message Board
          </h1>
          <p className="text-lg text-gray-600">
            Share your thoughts and save it on the Blockchain
          </p>
          <div className="mt-2">
            <span className="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-blue-100 text-blue-800">
              Sepolia Testnet
            </span>
          </div>
        </div>

        {/* Network Error */}
        {networkError && (
          <div className="bg-yellow-100 border border-yellow-400 text-yellow-700 px-4 py-3 rounded-lg mb-6">
            <div className="flex justify-between items-center">
              <span>{networkError}</span>
              <button
                onClick={switchToSepolia}
                className="bg-yellow-500 hover:bg-yellow-600 text-white px-3 py-1 rounded text-sm"
              >
                Switch Network
              </button>
            </div>
          </div>
        )}

        {/* Wallet Connection */}
        <div className="bg-white rounded-lg shadow-md p-6 mb-6 border border-gray-200">
          {!account ? (
            <div className="text-center">
              <button
                onClick={connectWallet}
                className="bg-blue-500 hover:bg-blue-600 text-white font-bold py-3 px-6 rounded-lg transition-colors"
              >
                Connect Wallet
              </button>
              <p className="text-sm text-gray-500 mt-2">
                Connect your MetaMask wallet to post messages on Sepolia
              </p>
            </div>
          ) : (
            <div className="text-center">
              <p className="text-green-600 font-semibold">
                Wallet Connected: {shortenAddress(account)}
              </p>
              <p className="text-sm text-gray-500">
                Connected to Sepolia Testnet
              </p>
            </div>
          )}
        </div>

        {/* Message Input Section */}
        {account && (
          <div className="bg-white rounded-lg shadow-md p-6 mb-6 border border-gray-200">
            <h2 className="text-xl font-semibold mb-4">Post a Message</h2>
            <div className="space-y-4">
              <div>
                <textarea
                  value={newMessage}
                  onChange={handleMessageChange}
                  placeholder="Enter your message (Max 280 characters)"
                  className="w-full p-3 border border-gray-300 rounded-lg resize-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  rows={3}
                />
                <div className="flex justify-between items-center mt-2">
                  <span className={`text-sm ${
                    newMessage.length > MAX_CHARACTERS * 0.9 
                      ? 'text-red-500' 
                      : 'text-gray-500'
                  }`}>
                    {newMessage.length}/{MAX_CHARACTERS} characters
                  </span>
                </div>
              </div>
              <button
                onClick={postMessage}
                disabled={loading || !newMessage.trim() || !!networkError}
                className="bg-green-500 hover:bg-green-600 disabled:bg-gray-300 text-white font-bold py-2 px-6 rounded-lg transition-colors"
              >
                {loading ? 'Posting to Blockchain...' : 'Post Message'}
              </button>
              
              {/* Error and Success Messages */}
              {error && (
                <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded-lg text-base font-medium">
                  {error}
                </div>
              )}
              {success && (
                <div className="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded-lg text-base font-medium">
                  {success}
                </div>
              )}
            </div>
          </div>
        )}

        {/* Sort and Filter Controls */}
        <div className="bg-white rounded-lg shadow-md p-6 mb-6 border border-gray-200">
          <h3 className="text-lg font-semibold mb-4">Sort & Filter Messages</h3>
          
          {/* Sort Controls */}
          <div className="flex flex-wrap items-center gap-4 mb-6">
            <div className="flex items-center gap-3">
              <label className="text-sm font-medium text-gray-700">Sort by:</label>
              <select
                value={sortBy}
                onChange={(e) => handleSortChange(e.target.value as 'timestamp' | 'author', sortOrder)}
                className="px-3 py-2 border border-gray-300 rounded-md text-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              >
                <option value="timestamp">Time Posted</option>
                <option value="author">Author Address</option>
              </select>
            </div>
            
            <div className="flex items-center gap-3">
              <select
                value={sortOrder}
                onChange={(e) => handleSortChange(sortBy, e.target.value as 'asc' | 'desc')}
                className="px-3 py-2 border border-gray-300 rounded-md text-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              >
                <option value="desc">
                  {sortBy === 'timestamp' ? 'Newest First' : 'Z to A'}
                </option>
                <option value="asc">
                  {sortBy === 'timestamp' ? 'Oldest First' : 'A to Z'}
                </option>
              </select>
            </div>
          </div>

          {/* Filter Controls */}
          <div className="flex flex-wrap items-center gap-3">
            <input
              type="text"
              value={filterAuthor}
              onChange={(e) => setFilterAuthor(e.target.value)}
              placeholder="Filter by address (0x1234...)"
              className="px-3 py-2 border border-gray-300 rounded-md text-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent flex-1 min-w-64"
            />
            <button
              onClick={handleFilter}
              disabled={loading}
              className="px-4 py-2 bg-blue-500 hover:bg-blue-600 disabled:bg-blue-300 text-white rounded-md text-sm transition-colors"
            >
              Filter
            </button>
            {account && (
              <button
                onClick={showMyMessages}
                disabled={loading}
                className="px-4 py-2 bg-purple-500 hover:bg-purple-600 disabled:bg-purple-300 text-white rounded-md text-sm transition-colors"
              >
                My Messages
              </button>
            )}
            <button
              onClick={clearFilter}
              disabled={loading}
              className="px-4 py-2 bg-gray-500 hover:bg-gray-600 disabled:bg-gray-300 text-white rounded-md text-sm transition-colors"
            >
              Show All
            </button>
          </div>

          {/* Filter Status */}
          {isFiltered && (
            <div className="mt-3 text-sm text-blue-600 font-medium">
              Showing messages from: {shortenAddress(filterAuthor)}
            </div>
          )}
        </div>

        {/* Messages Display */}
        <div className="bg-white rounded-lg shadow-md p-6 border border-gray-200">
          <div className="flex justify-between items-center mb-6">
            <h2 className="text-xl font-semibold">
              Messages ({messages.length})
              {isFiltered && (
                <span className="text-sm font-normal text-blue-600 ml-2">
                  (filtered)
                </span>
              )}
            </h2>
            <button
              onClick={() => {
                if (isFiltered && filterAuthor) {
                  loadMessagesByAuthor(filterAuthor);
                } else {
                  loadMessages();
                }
              }}
              disabled={loading}
              className="bg-gray-500 hover:bg-gray-600 disabled:bg-gray-300 text-white px-4 py-2 rounded-lg transition-colors text-sm"
            >
              {loading ? 'Loading...' : 'Refresh'}
            </button>
          </div>

          {messages.length === 0 ? (
            <div className="text-center py-12 text-gray-500">
              {loading ? 'Loading messages...' : 
               isFiltered ? 'No messages found for this author.' :
               'No messages yet. Be the first to post.'}
            </div>
          ) : (
            <div className="space-y-4">
              {messages.map((message) => {
                const isExpanded = expandedMessages.has(message.id);
                return (
                  <div
                    key={message.id}
                    className="border-2 border-gray-200 rounded-lg p-5 hover:bg-gray-50 hover:border-gray-300 transition-all duration-200 bg-white"
                  >
                    <div className="flex justify-between items-start mb-3">
                      <div className="flex flex-col gap-2">
                        <div className="flex items-center space-x-3">
                          <span className="text-sm text-gray-600 font-medium">Poster Address:</span>
                          <span className="font-mono text-sm bg-gray-100 px-3 py-1 rounded-md border">
                            {isExpanded ? message.author : shortenAddress(message.author)}
                          </span>
                          {message.author.toLowerCase() === account.toLowerCase() && (
                            <span className="text-xs bg-emerald-100 text-emerald-700 px-3 py-1 rounded-full font-medium">
                              Your Message
                            </span>
                          )}
                        </div>
                        {isExpanded && (
                          <div className="flex items-center space-x-3">
                            <span className="text-sm text-gray-600 font-medium">Message Index:</span>
                            <span className="font-mono text-sm bg-blue-100 px-3 py-1 rounded-md border text-blue-700">
                              #{message.id}
                            </span>
                            <span className="text-xs text-gray-500">
                              (Blockchain position)
                            </span>
                          </div>
                        )}
                      </div>
                      <div className="text-right">
                        <div className="text-sm text-gray-600 font-medium">Time Posted:</div>
                        <span className="text-sm text-gray-500">
                          {isExpanded 
                            ? message.timestamp.toLocaleString('en-US', {
                                weekday: 'long',
                                year: 'numeric',
                                month: 'long',
                                day: 'numeric',
                                hour: '2-digit',
                                minute: '2-digit',
                                second: '2-digit'
                              })
                            : message.timestamp.toLocaleString()
                          }
                        </span>
                        {isExpanded && (
                          <div className="mt-1">
                            <span className="text-xs text-gray-500">
                              Unix timestamp: {Math.floor(message.timestamp.getTime() / 1000)}
                            </span>
                          </div>
                        )}
                      </div>
                    </div>
                    
                    <div className="mb-3">
                      {isExpanded ? (
                        <p className="text-gray-800 whitespace-pre-wrap leading-relaxed break-words">
                          {message.content}
                        </p>
                      ) : (
                        <p className="text-gray-800 leading-relaxed break-words overflow-hidden">
                          {message.content.length > 200 ? (
                            <>
                              <span>{message.content.substring(0, 200)}</span>
                              <span className="text-gray-500">...</span>
                            </>
                          ) : (
                            message.content
                          )}
                        </p>
                      )}
                    </div>
                    
                    {isExpanded && (
                      <div className="bg-gray-50 rounded-lg p-4 border border-gray-200 mb-3">
                        <h4 className="text-sm font-semibold text-gray-700 mb-3">Message Details:</h4>
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-3 text-sm">
                          <div>
                            <span className="font-medium text-gray-600">Character Count:</span>
                            <span className="ml-2 text-gray-800">{message.content.length} characters</span>
                          </div>
                          <div>
                            <span className="font-medium text-gray-600">Message ID:</span>
                            <span className="ml-2 font-mono text-blue-600">#{message.id}</span>
                          </div>
                          <div>
                            <span className="font-medium text-gray-600">Author:</span>
                            <span className="ml-2 text-gray-800">
                              {message.author.toLowerCase() === account.toLowerCase() ? 'You' : 'Other User'}
                            </span>
                          </div>
                          <div>
                            <span className="font-medium text-gray-600">Message Length:</span>
                            <span className="ml-2 text-gray-800">
                              {message.content.length <= 50 ? 'Short' : 
                               message.content.length <= 150 ? 'Medium' : 'Long'}
                            </span>
                          </div>
                        </div>
                      </div>
                    )}
                    
                    <div className="flex justify-end">
                      <button
                        onClick={() => toggleMessageExpansion(message.id)}
                        className="text-sm bg-blue-100 hover:bg-blue-200 text-blue-700 px-4 py-2 rounded-md transition-colors font-medium"
                      >
                        {isExpanded ? 'Show Less' : 'Show More'}
                      </button>
                    </div>
                  </div>
                );
              })}
            </div>
          )}
        </div>

        {/* Footer */}
        <div className="text-center mt-8 text-sm text-gray-500">
          <p>Contract deployed on Sepolia Testnet</p>
          <p>Contract Address: {shortenAddress(CONTRACT_ADDRESS)}</p>
        </div>
      </div>
    </div>
  );
}